mystep=1; myzero=0; mywidth=5; mytitle="Log2 Hazard Ratio"
}
if (metric=="ci"){
cindex<- t(apply(X=rescale(t(myset[,30:ncol(myset)]) , q=0.05, na.rm=TRUE), MARGIN=1, function(x, y, z) {
tt <- concordance.index(x=x, surv.time=y, surv.event=z, na.rm=TRUE);
return(c("cindex"=tt$c.index, "cindex.se"=tt$se, "lower"=tt$lower, "upper"=tt$upper)); },
y=myset[,mysurv_time], z=myset[,mysurv_event]))
mydata<-merge(myidann, cindex, by=0)
mydata<-mydata[,-1]
rownames(mydata)<-mydata[,1]
mydata<-mydata[,-1]
mymean<-2
mylower<-4
myupper<-5
mydata_ordered<-mydata[ order(-mydata[,mymean]), ]
ordered_names<-as.character(mydata_ordered$Symbol)
myspace <- " "
mybigspace <- "    "
labeltext <- cbind(c("Gene Symbol",ordered_names),c(rep(mybigspace,length(ordered_names)+1))) ###need one more bigspace than genes
bs <- rep(.75, nrow(labeltext))###this changes the square of the box data point
r.mean <- c(NA,(mydata_ordered[,mymean]))
r.lower <- c(NA,(mydata_ordered[,mylower]))
r.upper <- c(NA,(mydata_ordered[,myupper]))
mylow=floor(min((mydata_ordered[,mymean+2]))*20)/20; myhigh=ceiling(max((mydata_ordered[,mymean+3]))*20)/20;
mystep=.05; myzero=.5; mywidth=5; mytitle="Concordance Index"
}
pdf(file=paste(signame,"_",metric,"_", subtype,"_ForestPlot.pdf", sep=""),width=8, height=10.5)
forestplot.surv(labeltext=labeltext, mean=r.mean, lower=r.lower, upper=r.upper, zero=myzero,
align=c("l"), graphwidth=unit(mywidth, "inches"), x.ticks=seq(mylow,myhigh,mystep), xlab=paste( mytitle, myspace, sep=""),
col=meta.colors(box="royalblue", line="darkblue", zero="darkred"), box.size=bs, clip=c(mylow,myhigh),margin=c(5,5))
graphics.off()
}
mysigfile<-"foxa1sig.txt"
idtype<-"symbol"
signame<-"test"
subtype<-"MOD1"
results_dir="/Volumes/Data/Git_Repos/GeneAnalytics/htdocs/results/heat_152.16.218.176_1400104797"
#validation
idtype <- match.arg(idtype)
subtype <- match.arg(subtype)
#get file
mysigfileloc<-paste("../htdocs/uploads","/", mysigfile, sep="")
mysigfiledn<-read.table(mysigfileloc, sep="\t", header=F)
id<-unique(as.character(mysigfiledn[,1]))
id<-gsub("\\s","", id)
if (exists("mysigfiledn") & (idtype=="symbol")){
sigsymbols<-id
} else if (exists("mysigfiledn") & (idtype=="probe")){
sigprobes<-id
} else {stop("Please define id and idtype.")
}
mysigfileloc<-paste("../htdocs/uploads","/", mysigfile, sep="")
mysigfiledn<-read.table(mysigfileloc, sep="\t", header=F)
setwd("/volumes/Data/Git_Repos/GeneAnalytics/cgi-bin")
mysigfileloc<-paste("../htdocs/uploads","/", mysigfile, sep="")
mysigfiledn<-read.table(mysigfileloc, sep="\t", header=F)
id<-unique(as.character(mysigfiledn[,1]))
id<-gsub("\\s","", id)
if (exists("mysigfiledn") & (idtype=="symbol")){
sigsymbols<-id
} else if (exists("mysigfiledn") & (idtype=="probe")){
sigprobes<-id
} else {stop("Please define id and idtype.")
}
#get identifiers, validate, inform if missing
if (!exists("sigsymbols") & exists("sigprobes")){
library(hgu133a.db)
sigsymbols_map = unlist(mget(sigprobes, hgu133aSYMBOL,ifnotfound=NA))
sigpmissing<-subset(sigsymbols_map,is.na(sigsymbols_map))
if ( length(sigpmissing) > 0 ) {
cat ( " These probes could not be mapped:", paste(shQuote(names(sigpmissing)), collapse=", "))
}
sigann<-subset(sigsymbols_map,!is.na(sigsymbols_map))
myidann<-data.frame(names(sigann), sigann)
}
if (!exists("sigprobes") & exists("sigsymbols")){
library(jetset)
sigsymbols<- toupper(sigsymbols)
sigprobes_map<-(jmap('hgu133a', symbol = sigsymbols))
sigsmissing<-subset(sigprobes_map,is.na(sigprobes_map))
if ( length(sigsmissing) > 0 ) {
cat ( " These probes could not be mapped:", paste(shQuote(names(sigsmissing)), collapse=", "))
}
sigann<-subset(sigprobes_map,!is.na(sigprobes_map))
myidann<-data.frame(sigann, names(sigann))
}
colnames(myidann)<-c("Probe", "Symbol")
rownames(myidann)<-myidann$Probe
myidann<-myidann[order(myidann$Probe),]
###load data using sql
library(RSQLite)
drv <- dbDriver("SQLite")
con <- dbConnect(drv, dbname="../resources/data/BRCADB_final_2013.sqlite")
dbListTables(con)
probesql<-paste("'",myidann$Probe,"'",collapse=", ",sep="")
myquery<-paste("SELECT * FROM BRCADB WHERE row_names IN (",probesql,") ORDER BY row_names" ,sep="")
gene<-dbGetQuery(con,myquery)
genenames<-gene[1,]
gene<-gene[-1]
gene<-as.data.frame(t(gene))
colnames(gene)<-myidann$Probe
basedir<-results_dir
mydir<-paste(basedir,"/", signame, "-","heatmap",sep="")
dir.create(mydir)
mydir2<-paste(mydir, "/", sep="")
setwd(mydir2)
clin<-read.table("../resources/data/BRCADB_2013_Clinical.txt", sep="\t", header=T)
rownames(clin)<-clin[,2]
if (subtype=='PAM50') {setlistkm<-levels(clin[,3])
myrow<-3 }#pam50
if (subtype=='MOD1') {setlistkm<-levels(clin[,4])
myrow<-4 }# mod1
if (subtype=='MOD2') {setlistkm<-levels(clin[,5])
myrow<-5 }#mod2
clinset<-clin[,myrow]
clindf<-data.frame(rownames(clin),clinset)
colnames(clindf)<-c("GSM","Subtype")
myset<-merge(clindf, gene, by.x=1, by.y=0)
clin<-read.table("../resources/data/BRCADB_2013_Clinical.txt", sep="\t", header=T)
setwd("/volumes/Data/Git_Repos/GeneAnalytics/cgi-bin")
clin<-read.table("../resources/data/BRCADB_2013_Clinical.txt", sep="\t", header=T)
rownames(clin)<-clin[,2]
if (subtype=='PAM50') {setlistkm<-levels(clin[,3])
myrow<-3 }#pam50
if (subtype=='MOD1') {setlistkm<-levels(clin[,4])
myrow<-4 }# mod1
if (subtype=='MOD2') {setlistkm<-levels(clin[,5])
myrow<-5 }#mod2
clinset<-clin[,myrow]
clindf<-data.frame(rownames(clin),clinset)
colnames(clindf)<-c("GSM","Subtype")
myset<-merge(clindf, gene, by.x=1, by.y=0)
###get ready to plot-------
basedir<-results_dir
mydir<-paste(basedir,"/", signame, "-","heatmap",sep="")
dir.create(mydir)
mydir2<-paste(mydir, "/", sep="")
setwd(mydir2)
#reshape data for heatmap
library(ggplot2)
library(reshape)
mdata <- melt(myset, id=c("GSM","Subtype"),variable_name="probe")
cdata <- cast(mdata, probe~Subtype, mean)
cadata<-merge(myidann, cdata, by.x=1, by.y=1)
rownames(cadata)<-cadata[,2]
cadata<-as.matrix(cadata[,-c(1:2)])
gdata<- melt(cdata, id=c("probe"))
adata<-merge(myidann, gdata, by.x=1, by.y=1)
#adata$Subtype<-gsub("/", "_", adata$Subtype)
#adata$Subtype<-gsub("\\+", "pos", adata$Subtype)
#adata$Subtype<-gsub("\\-", "neg", adata$Subtype)
#adata$Subtype<-gsub(" ", "-", adata$Subtype)
###ggplot heatmap
base <- (ggplot(adata, aes(Subtype, Symbol)) + geom_tile(aes(fill = value),color = "black")
+ scale_fill_gradient(low = "white",high = "red"))
myheatmap<- base + theme_bw()+theme(axis.text  = element_text(size = rel(1.5)),axis.text.y = element_text(size=rel(.8)))+labs(title = "",x = "", y="") +theme(axis.text.x = element_text(angle = 90, hjust = 1
))
fname<-paste(signame,"_",subtype, "_Heatmap_ggplot.pdf",sep="")
ggsave(plot=myheatmap,filename=fname, dpi=320, width=8, height=12)
#alternate heatmap
###framework
library(gplots)
library(RColorBrewer)
mydistman= function(x) dist(x,method = 'manhattan')#like2
mycol2<- colorpanel(29,"gray90","red")
my.breaks <- c(seq(4, 6, length.out=10),seq(6, 8),seq(8,12, length.out=10))
pdf(file=paste(signame,"_", subtype,"_Heatmap_clustered.pdf", sep=""),width=10, height=12)
rmheat<-heatmap.2(cadata, trace="none", dendrogram="both", col=mycol2,Rowv=TRUE, Colv=TRUE, main="", symbreaks=F, scale= "none",margins=c(15,10), cexRow=1, cexCol=1.5, labRow=row.names(cadata),distfun=mydistman,density.info="none", keysize=1)
graphics.off()
}
setwd("/volumes/Data/Git_Repos/GeneAnalytics/cgi-bin")
id="notch1"
idtype="symbol"
months=250
subtype="PAM50"
chemo="any"
tam="compare"
split="tertile"
surv_type="dmfs"
results_dir<-"/Volumes/Data/Git_Repos/GeneAnalytics/htdocs/results/XBP1_152.16.218.176_1400106158/"
dir.create(results_dir)
if (exists("id") & (idtype=="symbol")){
symbol<-id
} else if (exists("id") & (idtype=="probe")){probe<-id
} else {stop("Please define id and idtype.")
}
#get identifiers
if (!exists("symbol") & exists("probe")){
require(hgu133a.db)
symbol = unlist(mget(probe, hgu133aSYMBOL))
symbol<-symbol[[1]]}
if (!exists("probe") & exists("symbol")){
require(jetset)
symbol<- toupper(symbol)
probe<-jmap('hgu133a', symbol = symbol)[[1]]}
if (missing(months)) months = 160
#cat("Id=:", id, "\n")
#cat("Probe=", probe, "\n")
#cat("Symbol=", symbol, "\n")
#cat("Months=", months,"\n")
#cat("Subtype=", subtype,"\n")
#cat("Chemo=", chemo,"\n")
#cat("Tam=", tam,"\n")
#cat("Split=", split, "\n")
###load data using from sql
clin<-read.table("../resources/data/BRCADB_2013_Clinical.txt", sep="\t", header=T)
rownames(clin)<-clin[,2]
require(ggplot2)
require(survival)
require(RSQLite)
require(survcomp)
require(rmeta)
drv <- dbDriver("SQLite")
con <- dbConnect(drv, dbname="../resources/data/BRCADB/BRCADB_final_2013.sqlite") # could use diff
dbListTables(con)
myquery<-paste("SELECT * FROM BRCADB WHERE row_names = '",probe,"'" ,sep="")
gene<-dbGetQuery(con,myquery)
gene<-gene[-1]
gene<-as.data.frame(t(gene))
myset<-merge(gene,clin, by=0)
colnames(myset)[2]<-probe
drv <- dbDriver("SQLite")
con <- dbConnect(drv, dbname="../resources/data/BRCADB/BRCADB_final_2013.sqlite") # could use diff
con <- dbConnect(drv, dbname="../resources/data/BRCADB_final_2013.sqlite") # could use diff
dbListTables(con)
myquery<-paste("SELECT * FROM BRCADB WHERE row_names = '",probe,"'" ,sep="")
gene<-dbGetQuery(con,myquery)
gene<-gene[-1]
gene<-as.data.frame(t(gene))
myset<-merge(gene,clin, by=0)
colnames(myset)[2]<-probe
#cat("Mysetdim=", dim(myset),"\n")
##subset treatments
if(exists("chemo")){
if(chemo=="yes"){
survcases<-subset(clin,AnyChemo %in% c("YES"))
myset<-myset[myset[,1] %in% survcases$GSM,]}
if(chemo=="no"){
survcases<-subset(clin,AnyChemo %in% c("NO"))
myset<-myset[myset[,1] %in% survcases$GSM,]}
if(chemo=="compare"){
survcases<-subset(clin,AnyChemo %in% c("YES", "NO"))
myset<-myset[myset[,1] %in% survcases$GSM,]}
}
if(exists("tam")){
if(tam=="yes"){
survcases<-subset(clin,Tamoxifen %in% c("YES"))
myset<-myset[myset[,1] %in% survcases$GSM,]}
if(tam=="no"){
survcases<-subset(clin,Tamoxifen %in% c("NO"))
myset<-myset[myset[,1] %in% survcases$GSM,]}
if(tam=="compare"){
survcases<-subset(clin,Tamoxifen %in% c("YES", "NO"))
myset<-myset[myset[,1] %in% survcases$GSM,]}
}
#cat("Mysetdim=", dim(myset),"\n")
###get ready to plot-------
basedir<-results_dir
name<-paste(symbol, "-", probe, sep="")
mydir<-paste(basedir,"/", id, "-","survival",sep="")
dir.create(mydir)
mydir2<-paste(mydir, "/", sep="")
setwd(mydir2)
mysetkm<-NULL
mycoxkm<-NULL
mycoxphkm<-NULL
myfitkm<-NULL
if (subtype=='PAM50') {setlistkm<-levels(clin[,3])
myrow<-5 }#pam50
if (subtype=='MOD1') {setlistkm<-levels(clin[,4])
myrow<-6 }# mod1
if (subtype=='MOD2') {setlistkm<-levels(clin[,5])
myrow<-7 }#mod2
if (split=='median') {
mysplit=2
mykeep<-c('1','2')}
if (split=='tertile') {
mysplit=3
mykeep <- c('1','3')}
if (split=='quartile') {
mysplit=4
mykeep<-c('1','4')}
if (surv_type=='rfs') {
mysurv_event=17
mysurv_time=18
mysurv_label="RFS"
}
if (surv_type=='dmfs') {
mysurv_event=19
mysurv_time=20
mysurv_label="DMFS"
}
if (surv_type=='combo') {
mysurv_event=25
mysurv_time=26
mysurv_label="RFS/DMFS"
}
#print(setlistkm)
#print(myrow)
#print(mysplit)
subtypename<-gsub("/", "_", setlistkm)
subtypename<-gsub("\\+", "pos", subtypename)
subtypename<-gsub("\\-", "neg", subtypename)
subtypename<-gsub(" ", "-", subtypename)
comboname<-paste(subtype, "-chemo_", chemo, "-tam_",tam,"-", split, sep="")
write.table(myset, paste("all-myset.txt", sep=""), sep="\t", col.names=NA)
medinf<-NULL
mytext<-NULL
myinf<-NULL
mysetk<-myset
mysetkm<-NULL
dim(mysetk)
mysetk <- within(mysetk, datasplit <- as.integer(cut(mysetk[,2], quantile(mysetk[,2], probs=0:mysplit/mysplit), include.lowest=TRUE)))
mysetkm <- subset(mysetk, datasplit %in% mykeep)
write.table(mysetkm, paste(paste("Overall", "-myset.txt",sep=""), sep=""), sep="\t", col.names=NA)
mycoxkm<-Surv(mysetkm[,mysurv_time], mysetkm[,mysurv_event])~mysetkm$datasplit
mycoxphkm<-coxph(Surv(mysetkm[,mysurv_time], mysetkm[,mysurv_event])~mysetkm$datasplit)
beta <- coef(mycoxphkm)
HR <- signif(exp(beta), digits=3)
se <- sqrt(diag(vcov(mycoxphkm)))
HRse <- HR * se
myfitkm<- survfit(mycoxkm, data = mysetkm)
pdf(file=paste(symbol,"_", subtype,"_", chemo,"_", tam,"_",split,"_Overall","_Survival.pdf", sep=""),width=10.5, height=8)
par(fig=c(0,1,0,1),oma=c(1,1,1,1), mar=c(5, 5, 4, 2))
plot(myfitkm, main=paste(symbol, ":", subtype ,"-","Overall"),cex.main=1.5, cex.axis=1.5, cex.lab= 1.7 ,col=c("blue", "red"), lty=1, lwd=2.5, xlab= "Months", ylab= mysurv_label,xlim=c(0,months))
legend("topright",c("Low", "High"), col=c("blue", "red"), lty=1, lwd=3, title=probe, ncol=2, cex=1.3, x.intersp=.5, y.intersp=.8)
test<-survdiff(mycoxkm)
p.value <- signif(1-pchisq(test$chi,df=1),digits=3)
msurv<-with(mysetkm,Surv(mysetkm[,mysurv_time], mysetkm[,mysurv_event]))
val<-msurv[!is.na(msurv)]
nval<-dim(val)[1]
text(months/3,.05, paste("pval=",p.value,","," HR=",HR,",", " N=",nval),cex=1.5)
rug(mysetkm[,mysurv_time][mysetkm[,mysurv_event]==0])
#medinf<-summary(myfitkm)$table
#rownames(medinf)<-c(paste(symbol,"-Low", sep=""), paste(symbol,"-High", sep=""))
#medinf<-as.matrix(medinf)
#myinf<-medinf[,c(1,4,5,6,7)]
#colnames(myinf)<-c("Samples","Events", "median", "0.95LCL", "0.95UCL")
dev.off()
###forestplots--
myGSEIDS<-as.character(unique(mysetk$GSE))
rescale <- function(x, na.rm=FALSE, q=0.05) {
ma <- quantile(x, probs=1-(q/2), na.rm=na.rm)
mi <- quantile(x, probs=q/2, na.rm=na.rm)
x <- (x - mi) / (ma - mi)
return((x - 0.5) * 2)
}
myeset<-list()
hratio<-list()
myexprs<-NULL
mysetpts<-NULL
for ( j in 1: length(myGSEIDS)){
myeset[[j]] <- subset(mysetk,GSE==myGSEIDS[j] )
myexprs[[j]]<- myeset[[j]][,c(2,2)]
rownames(myexprs[[j]])<-myeset[[j]][,1]
hratio[[j]]<- t(apply(X=rescale(t(myexprs[[j]]) , q=0.05, na.rm=TRUE), MARGIN=1, function(x, y, z) {
tt <- concordance.index(x=x, surv.time=y, surv.event=z, method="noether",na.rm=TRUE);
return(c("cindex"=tt$c.index, "cindex.se"=tt$se, "lower"=tt$lower, "upper"=tt$upper)); },
y=myeset[[j]][,mysurv_time], z=myeset[[j]][,mysurv_event]))
mysetpts[j]<-dim(myeset[[j]])[[1]]
}
###get data into usable format
require(abind)
j<-abind(hratio,along=1)
mysetindex<-rep(myGSEIDS, each=2)
mygeneindex<-rep(1:2,times=length(myGSEIDS))
k<-data.frame(j,row.names=paste(rownames(j),mysetindex, sep="_"))
k$set<-mysetindex
k$genes<-rownames(j)
myhrdf<-subset(k, genes==probe)
myhrdf$no<-mysetpts
myhrdf<-na.omit(myhrdf)
###forestplot
myspace <- " "
mybigspace <- "    "
labeltext <- cbind(c("Dataset",paste(myhrdf$set, ", N=", myhrdf$no, sep="")),c(rep(mybigspace,length(myhrdf$set)+1)))
bs <- rep(0.5, nrow(labeltext))
r.mean <- c(NA,(myhrdf$cindex))
r.lower <- c(NA,(myhrdf$lower))
r.upper <- c(NA,(myhrdf$upper))
pdf(file=paste(symbol,"_", subtype,"_", chemo,"_", tam,"_",split,"_","Overall","_cindex.pdf", sep=""),width=10.5, height=8)
forestplot.surv(labeltext=labeltext, mean=r.mean, lower=r.lower, upper=r.upper, zero=.5,
align=c("l"), graphwidth=unit(1.5, "inches"), x.ticks=seq(0,1,0.25), xlab=paste( "Concordance Index", myspace, sep=""),
col=meta.colors(box="royalblue", line="darkblue", zero="darkred"), box.size=bs ) #clip=c(0,1)
dev.off()
###plot by subtype ---------
mysetk<-NULL
mysetkm<-NULL
mycoxkm<-NULL
mycoxphkm<-NULL
myfitkm<-NULL
for(i in 1:length(setlistkm)){
#cat("Plotting=:", setlistkm[i], "\n")
medinf<-NULL
mytext<-NULL
myinf<-NULL
mysetk[[i]]<-myset
dim(mysetk[[i]])
mysetk[[i]]<-subset(mysetk[[i]], mysetk[[i]][,myrow]==setlistkm[i])
mysetk[[i]] <- within(mysetk[[i]], datasplit <- as.integer(cut(mysetk[[i]][,2], quantile(mysetk[[i]][,2], probs=0:mysplit/mysplit), include.lowest=TRUE)))
mysetkm[[i]] <- subset(mysetk[[i]], datasplit %in% mykeep)
###need a failsafe if not enough records
table(mysetkm[[i]]$MYSURV_Event,mysetkm[[i]]$datasplit)
write.table(mysetkm[[i]], paste( paste(subtypename[i], "-myset.txt",sep=""), sep=""), sep="\t", col.names=NA)
if(tam == "compare"){
mycoxkm[[i]]<-Surv(mysetkm[[i]][,mysurv_time], mysetkm[[i]][,mysurv_event])~mysetkm[[i]]$datasplit+mysetkm[[i]]$Tamoxifen
myfitkm[[i]]<- survfit(mycoxkm[[i]], data = mysetkm[[i]])
pdf(file=paste(symbol,"_", subtype,"_", chemo,"_", tam,"_",split,"_",subtypename[i],"_Survival.pdf", sep=""),width=10.5, height=8)
par(fig=c(0,1,0,1),oma=c(1,1,1,1), mar=c(5, 5, 4, 2))
plot(myfitkm[[i]], main=paste(symbol, ":", subtype ,"-",setlistkm[i]),cex.main=1.5, cex.axis=1.5, cex.lab= 1.7 ,col=c("blue", "forestgreen", "red", "purple"), lty=1, lwd=2.5, xlab= "Months", ylab= mysurv_label,xlim=c(0,months))
legend("topright",c("Low", "Low-Tam", "High", "High-Tam"), col=c("blue", "forestgreen", "red", "purple"), lty=1, lwd=3, title=probe, ncol=2, cex=1.3, x.intersp=.5, y.intersp=.8)
test<-survdiff(mycoxkm[[i]])
p.value <- signif(1-pchisq(test$chi,df=1),digits=3)
msurv<-with(mysetkm[[i]],Surv(mysetkm[[i]][,mysurv_time], mysetkm[[i]][,mysurv_event]))
val<-msurv[!is.na(msurv)]
nval<-dim(val)[1]
text(months/3,.05, paste("pval=",p.value,",", " N=",nval),cex=1.5)
rug(mysetkm[[i]][,mysurv_time][mysetkm[[i]][,mysurv_event]==0])
#medinf<-summary(myfitkm[[i]])$table
#rownames(medinf)<-c(paste(symbol,"-Low", sep=""), paste(symbol,"-High", sep=""))
#medinf<-as.matrix(medinf)
#myinf<-medinf[,c(1,4,5,6,7)]
#colnames(myinf)<-c("Samples","Events", "median", "0.95LCL", "0.95UCL")
dev.off()
}
if(tam != "compare"){
mycoxkm[[i]]<-Surv(mysetkm[[i]][,mysurv_time], mysetkm[[i]][,mysurv_event])~mysetkm[[i]]$datasplit
mycoxphkm[[i]]<-coxph(Surv(mysetkm[[i]][,mysurv_time], mysetkm[[i]][,mysurv_event])~mysetkm[[i]]$datasplit)
beta <- coef(mycoxphkm[[i]])
HR <- signif(exp(beta), digits=3)
se <- sqrt(diag(vcov(mycoxphkm[[i]])))
HRse <- HR * se
myfitkm[[i]]<- survfit(mycoxkm[[i]], data = mysetkm[[i]])
pdf(file=paste(symbol,"_", subtype,"_", chemo,"_", tam,"_",split,"_",subtypename[i],"_Survival.pdf", sep=""),width=10.5, height=8)
par(fig=c(0,1,0,1),oma=c(1,1,1,1), mar=c(5, 5, 4, 2))
plot(myfitkm[[i]], main=paste(symbol, ":", subtype ,"-",setlistkm[i]),cex.main=1.5, cex.axis=1.5, cex.lab= 1.7 ,col=c("blue", "red"), lty=1, lwd=2.5, xlab= "Months", ylab= mysurv_label ,xlim=c(0,months))
legend("topright",c("Low", "High"), col=c("blue", "red"), lty=1, lwd=3, title=probe, ncol=2, cex=1.3, x.intersp=.5, y.intersp=.8)
test<-survdiff(mycoxkm[[i]])
p.value <- signif(1-pchisq(test$chi,df=1),digits=3)
msurv<-with(mysetkm[[i]],Surv(mysetkm[[i]][,mysurv_time], mysetkm[[i]][,mysurv_event]))
val<-msurv[!is.na(msurv)]
nval<-dim(val)[1]
text(months/3,.05, paste("pval=",p.value,","," HR=",HR,",", " N=",nval),cex=1.5)
rug(mysetkm[[i]][,mysurv_time][mysetkm[[i]][,mysurv_event]==0])
medinf<-summary(myfitkm[[i]])$table
rownames(medinf)<-c(paste(symbol,"-Low", sep=""), paste(symbol,"-High", sep=""))
medinf<-as.matrix(medinf)
myinf<-medinf[,c(1,4,5,6,7)]
colnames(myinf)<-c("Samples","Events", "median", "0.95LCL", "0.95UCL")
dev.off()
}
###forestplots---
myGSEdf<-data.frame(table(mysetkm[[i]]$MYSURV_Event,mysetkm[[i]]$GSE))
myGSEdf<-subset(myGSEdf, myGSEdf[,1]==1 & myGSEdf[,3] >= 1)
myGSEIDS<-as.character(unique(myGSEdf[,2]))
if (length(myGSEIDS) >=1){
rescale <- function(x, na.rm=FALSE, q=0.05) {
ma <- quantile(x, probs=1-(q/2), na.rm=na.rm)
mi <- quantile(x, probs=q/2, na.rm=na.rm)
x <- (x - mi) / (ma - mi)
return((x - 0.5) * 2)
}
myeset<-list()
hratio<-list()
myexprs<-NULL
mysetpts<-NULL
for ( j in 1: length(myGSEIDS)){
myeset[[j]] <- subset(mysetk[[i]],GSE==myGSEIDS[j] )
myexprs[[j]]<- myeset[[j]][,c(2,2)]
rownames(myexprs[[j]])<-myeset[[j]][,1]
hratio[[j]]<- t(apply(X=rescale(t(myexprs[[j]]) , q=0.05, na.rm=TRUE), MARGIN=1, function(x, y, z) {
tt <- concordance.index(x=x, surv.time=y, surv.event=z, method="noether",na.rm=TRUE);
return(c("cindex"=tt$c.index, "cindex.se"=tt$se, "lower"=tt$lower, "upper"=tt$upper)); },
y=myeset[[j]][,mysurv_time], z=myeset[[j]][,mysurv_event]))
mysetpts[j]<-dim(myeset[[j]])[[1]]
}
###get data into usable format
require(abind)
j<-abind(hratio,along=1)
mysetindex<-rep(myGSEIDS, each=2)
mygeneindex<-rep(1:2,times=length(myGSEIDS))
k<-data.frame(j,row.names=paste(rownames(j),mysetindex, sep="_"))
k$set<-mysetindex
k$genes<-rownames(j)
myhrdf<-subset(k, genes==probe)
myhrdf$no<-mysetpts
myhrdf<-na.omit(myhrdf)
###forestplot
if(dim(myhrdf)[[1]]>=1){
myspace <- " "
mybigspace <- "    "
labeltext <- cbind(c("Dataset",paste(myhrdf$set, ", N=", myhrdf$no, sep="")),c(rep(mybigspace,length(myhrdf$set)+1)))
bs <- rep(0.5, nrow(labeltext))
r.mean <- c(NA,(myhrdf$cindex))
r.lower <- c(NA,(myhrdf$lower))
r.upper <- c(NA,(myhrdf$upper))
pdf(file=paste(symbol,"_", subtype,"_", chemo,"_", tam,"_",split,"_",subtypename[i],"_cindex.pdf", sep=""),width=10.5, height=8)
forestplot.surv(labeltext=labeltext, mean=r.mean, lower=r.lower, upper=r.upper, zero=.5,
align=c("l"), graphwidth=unit(1.5, "inches"), x.ticks=seq(0,1,0.25), xlab=paste( "Concordance Index", myspace, sep=""),
col=meta.colors(box="royalblue", line="darkblue", zero="darkred"), box.size=bs ) #clip=c(0,1)
dev.off()
}
}
}
###plotexpresssion-------------
basekm<- ggplot(myset, aes(myset[,myrow], myset[,2]), environment=environment())
basekmbox<-basekm +geom_boxplot(aes(fill = factor(myset[,myrow])), alpha=1)+scale_colour_brewer(palette="Set1")+scale_fill_hue(c=150, l=45)
myplotkmbox<- basekmbox+ labs(fill= "",title="", x= "", y= "Log2 Expression")
fname<-paste(symbol,"_", subtype,"_", chemo,"_", tam,"_",split,"_Expression.pdf",sep="")
#print(myplotkmbox)
ggsave(plot=myplotkmbox,filename=fname, dpi=320, width=12, height=10)
}
