ma <- quantile(x, probs=1-(q/2), na.rm=na.rm)
mi <- quantile(x, probs=q/2, na.rm=na.rm)
x <- (x - mi) / (ma - mi)
return((x - 0.5) * 2)
}
myeset<-list()
hratio<-list()
myexprs<-NULL
mysetpts<-NULL
for ( j in 1: length(myGSEIDS)){
myeset[[j]] <- subset(mysetk[[i]],GSE==myGSEIDS[j] )
myexprs[[j]]<- myeset[[j]][,c(2,2)]
rownames(myexprs[[j]])<-myeset[[j]][,1]
colnames(myexprs[[j]])<-c("1","2")
hratio[[j]]<- t(apply(X=rescale(t(myexprs[[j]]) , q=0.05, na.rm=TRUE), MARGIN=1, function(x, y, z) {
tt <- concordance.index(x=x, surv.time=y, surv.event=z, method="noether",na.rm=TRUE);
return(c("cindex"=tt$c.index, "cindex.se"=tt$se, "lower"=tt$lower, "upper"=tt$upper)); },
y=myeset[[j]][,mysurv_time], z=myeset[[j]][,mysurv_event]))
mysetpts[j]<-dim(myeset[[j]])[[1]]
}
#get data into usable format for metaplot
require(abind)
j<-abind(hratio,along=1)
mysetindex<-rep(myGSEIDS, each=2)
mygeneindex<-rep(1:2,times=length(myGSEIDS))
k<-data.frame(j,row.names=paste(rownames(j),mysetindex, sep="_"))
k$set<-mysetindex
k$genes<-rownames(j)
myhrdf<-subset(k, genes=="1")
myhrdf$no<-mysetpts
myhrdf<-na.omit(myhrdf)
#metaplot
if(dim(myhrdf)[[1]]>1){
myspace <- " "
mybigspace <- "    "
labeltext <- cbind(c("Dataset",paste(myhrdf$set, ", N=", myhrdf$no, sep="")),c(rep(mybigspace,length(myhrdf$set)+1)))
bs <- rep(0.5, nrow(labeltext))
r.mean <- c(NA,(myhrdf$cindex))
r.lower <- c(NA,(myhrdf$lower))
r.upper <- c(NA,(myhrdf$upper))
pdf(file=paste(signame,"_", subtype,"_", chemo,"_", tam,"_",split,"_",surv_type,"_",subtypename[i],"_cindex.pdf", sep=""),width=10.5, height=8)
forestplot.surv(labeltext=labeltext, mean=r.mean, lower=r.lower, upper=r.upper, zero=.5,
align=c("l"), graphwidth=unit(1.5, "inches"), x.ticks=seq(0,1,0.25), xlab=paste( "Concordance Index", myspace, sep=""),
col=meta.colors(box="royalblue", line="darkblue", zero="darkred"), box.size=bs ) #clip=c(0,1)
dev.off()
}
}
#plotexpresssion-------------
basekm<- ggplot(myset, aes(myset[,myrow], myset[,2]), environment=environment())
basekmbox<-basekm +geom_boxplot(aes(fill = factor(myset[,myrow])), alpha=1)+scale_colour_brewer(palette="Set1")+scale_fill_hue(c=150, l=45) + theme_bw(base_size = 20)
myplotkmbox<- basekmbox+ labs(fill= "",title="", x= "", y= "Log2 Expression")
fname<-paste(signame,"_", subtype,"_", chemo,"_", tam,"_",split,"_Expression.pdf",sep="")
#print(myplotkmbox)
ggsave(plot=myplotkmbox,filename=fname, dpi=320, width=12, height=10)
mysigfile="probetest.txt"
signame = "tester"
idtype="probe"
mysigfile="probetest.txt"
signame = "tester"
idtype="probe"
subtype="PAM50"
results_dir<-"/Volumes/Data/Git_Repos/GeneAnalytics/htdocs/results/test8"
dir.create(results_dir)
setwd("/Volumes/Data/Git_Repos/GeneAnalytics/cgi-bin")
mysigfileloc<-paste("../htdocs/uploads","/", mysigfile, sep="")
mysigfiledn<-read.table(mysigfileloc, sep="\t", header=F)
id<-unique(as.character(mysigfiledn[,1]))
id<-gsub("\\s","", id)
if (exists("mysigfiledn") & (idtype=="symbol")){
sigsymbols<-id
} else if (exists("mysigfiledn") & (idtype=="probe")){
sigprobes<-id
} else {stop("Please define id and idtype.")
}
#get identifiers, validate, inform if missing
if (!exists("sigsymbols") & exists("sigprobes")){
require(hgu133a.db)
sigsymbols_map = unlist(mget(sigprobes, hgu133aSYMBOL,ifnotfound=NA))
sigpmissing<-subset(sigsymbols_map,is.na(sigsymbols_map))
if ( length(sigpmissing) > 0 ) {
cat ( " These probes could not be mapped:", paste(shQuote(names(sigpmissing)), collapse=", "))
}
sigann<-subset(sigsymbols_map,!is.na(sigsymbols_map))
myidann<-data.frame(names(sigann), sigann)
}
if (!exists("sigprobes") & exists("sigsymbols")){
require(jetset)
sigsymbols<- toupper(sigsymbols)
sigprobes_map<-(jmap('hgu133a', symbol = sigsymbols))
sigsmissing<-subset(sigprobes_map,is.na(sigprobes_map))
if ( length(sigsmissing) > 0 ) {
cat ( " These probes could not be mapped:", paste(shQuote(names(sigsmissing)), collapse=", "))
}
sigann<-subset(sigprobes_map,!is.na(sigprobes_map))
myidann<-data.frame(sigann, names(sigann))
}
colnames(myidann)<-c("Probe", "Symbol")
rownames(myidann)<-myidann$Probe
myidann<-myidann[order(myidann$Probe),]
#load data using sql
require(RSQLite)
drv <- dbDriver("SQLite")
con <- dbConnect(drv, dbname="../resources/external/BRCADB_final_2013.sqlite")
dbListTables(con)
probesql<-paste("'",myidann$Probe,"'",collapse=", ",sep="")
myquery<-paste("SELECT * FROM BRCADB WHERE row_names IN (",probesql,") ORDER BY row_names" ,sep="")
gene<-dbGetQuery(con,myquery)
genenames<-gene[1,]
gene<-gene[-1]
gene<-as.data.frame(t(gene))
colnames(gene)<-myidann$Probe
clin<-read.table("../resources/data/BRCADB_2013_Clinical.txt", sep="\t", header=T)
rownames(clin)<-clin[,2]
if (subtype=='PAM50') {setlistkm<-levels(clin[,3])
myrow<-3 }#pam50
if (subtype=='MOD1') {setlistkm<-levels(clin[,4])
myrow<-4 }# mod1
if (subtype=='MOD2') {setlistkm<-levels(clin[,5])
myrow<-5 }#mod2
clinset<-clin[,myrow]
clindf<-data.frame(rownames(clin),clinset)
colnames(clindf)<-c("GSM","Subtype")
myset<-merge(clindf, gene, by.x=1, by.y=0)
#get ready to plot-------
basedir<-results_dir
mydir<-paste(basedir,"/", signame, "-","heatmap",sep="")
dir.create(mydir)
mydir2<-paste(mydir, "/", sep="")
setwd(mydir2)
#reshape data for heatmap
require(ggplot2)
require(reshape)
mdata <- melt(myset, id=c("GSM","Subtype"),variable_name="probe")
cdata <- cast(mdata, probe~Subtype, mean)
cadata<-merge(myidann, cdata, by.x=1, by.y=1)
rownames(cadata)<-cadata[,2]
cadata<-as.matrix(cadata[,-c(1:2)])
gdata<- melt(cdata, id=c("probe"))
adata<-merge(myidann, gdata, by.x=1, by.y=1)
#ggplot heatmap
base <- (ggplot(adata, aes(Subtype, Symbol)) + geom_tile(aes(fill = value),color = "black")
+ scale_fill_gradient(low = "white",high = "red"))
myheatmap<- base + theme_bw()+theme(axis.text  = element_text(size = rel(1.5)),axis.text.y = element_text(size=rel(.8)))+labs(title = "",x = "", y="") +theme(axis.text.x = element_text(angle = 90, hjust = 1
))
fname<-paste(signame,"_",subtype, "_Heatmap_ggplot.pdf",sep="")
ggsave(plot=myheatmap,filename=fname, dpi=320, width=8, height=12)
mdata <- melt(myset, id=c("GSM","Subtype"),variable_name="probe")
cdata <- cast(mdata, probe~Subtype, mean)
cadata<-merge(myidann, cdata, by.x=1, by.y=1)
rownames(cadata)<-cadata[,2]
cadata
cadata<-unique(cadata)
rownames(cadata)<-cadata[,2]
mynames<-make.names(cadata[,2], unique=T)
mynames
rownames(cadata)<-mynames
cadata<-as.matrix(cadata[,-c(1:2)])
gdata<- melt(cdata, id=c("probe"))
adata<-merge(myidann, gdata, by.x=1, by.y=1)
#ggplot heatmap
base <- (ggplot(adata, aes(Subtype, Symbol)) + geom_tile(aes(fill = value),color = "black")
+ scale_fill_gradient(low = "white",high = "red"))
myheatmap<- base + theme_bw()+theme(axis.text  = element_text(size = rel(1.5)),axis.text.y = element_text(size=rel(.8)))+labs(title = "",x = "", y="") +theme(axis.text.x = element_text(angle = 90, hjust = 1
))
fname<-paste(signame,"_",subtype, "_Heatmap_ggplot.pdf",sep="")
ggsave(plot=myheatmap,filename=fname, dpi=320, width=8, height=12)
#alternate heatmap
require(gplots)
require(RColorBrewer)
mydistman= function(x) dist(x,method = 'manhattan')
mycol2<- colorpanel(29,"gray90","red")
my.breaks <- c(seq(4, 6, length.out=10),seq(6, 8),seq(8,12, length.out=10))
pdf(file=paste(signame,"_", subtype,"_Heatmap_clustered.pdf", sep=""),width=10, height=12)
rmheat<-heatmap.2(cadata, trace="none", dendrogram="both", col=mycol2,Rowv=TRUE, Colv=TRUE, main="", symbreaks=F, scale= "none",margins=c(15,10), cexRow=1, cexCol=1.5, labRow=row.names(cadata),distfun=mydistman,density.info="none", keysize=1)
graphics.off()
}
ysigfile="probetest.txt"
signame = "tester7"
idtype="probe"
subtype="PAM50"
results_dir<-"/Volumes/Data/Git_Repos/GeneAnalytics/htdocs/results/tester7"
dir.create(results_dir)
setwd("/Volumes/Data/Git_Repos/GeneAnalytics/cgi-bin")
mysigfile="probetest.txt"
signame = "tester7"
idtype="probe"
subtype="PAM50"
results_dir<-"/Volumes/Data/Git_Repos/GeneAnalytics/htdocs/results/tester7"
dir.create(results_dir)
setwd("/Volumes/Data/Git_Repos/GeneAnalytics/cgi-bin")
#get file
mysigfileloc<-paste("../htdocs/uploads","/", mysigfile, sep="")
mysigfiledn<-read.table(mysigfileloc, sep="\t", header=F)
id<-unique(as.character(mysigfiledn[,1]))
id<-gsub("\\s","", id)
if (exists("mysigfiledn") & (idtype=="symbol")){
sigsymbols<-id
} else if (exists("mysigfiledn") & (idtype=="probe")){
sigprobes<-id
} else {stop("Please define id and idtype.")
}
#get identifiers, validate, inform if missing
if (!exists("sigsymbols") & exists("sigprobes")){
require(hgu133a.db)
sigsymbols_map = unlist(mget(sigprobes, hgu133aSYMBOL,ifnotfound=NA))
sigpmissing<-subset(sigsymbols_map,is.na(sigsymbols_map))
if ( length(sigpmissing) > 0 ) {
cat ( " These probes could not be mapped:", paste(shQuote(names(sigpmissing)), collapse=", "))
}
sigann<-subset(sigsymbols_map,!is.na(sigsymbols_map))
myidann<-data.frame(names(sigann), sigann)
}
if (!exists("sigprobes") & exists("sigsymbols")){
require(jetset)
sigsymbols<- toupper(sigsymbols)
sigprobes_map<-(jmap('hgu133a', symbol = sigsymbols))
sigsmissing<-subset(sigprobes_map,is.na(sigprobes_map))
if ( length(sigsmissing) > 0 ) {
cat ( " These probes could not be mapped:", paste(shQuote(names(sigsmissing)), collapse=", "))
}
sigann<-subset(sigprobes_map,!is.na(sigprobes_map))
myidann<-data.frame(sigann, names(sigann))
}
colnames(myidann)<-c("Probe", "Symbol")
rownames(myidann)<-myidann$Probe
myidann<-myidann[order(myidann$Probe),]
#load data using sql
require(RSQLite)
drv <- dbDriver("SQLite")
con <- dbConnect(drv, dbname="../resources/external/BRCADB_final_2013.sqlite")
dbListTables(con)
probesql<-paste("'",myidann$Probe,"'",collapse=", ",sep="")
myquery<-paste("SELECT * FROM BRCADB WHERE row_names IN (",probesql,") ORDER BY row_names" ,sep="")
gene<-dbGetQuery(con,myquery)
genenames<-gene[1,]
gene<-gene[-1]
gene<-as.data.frame(t(gene))
colnames(gene)<-myidann$Probe
clin<-read.table("../resources/data/BRCADB_2013_Clinical.txt", sep="\t", header=T)
rownames(clin)<-clin[,2]
if (subtype=='PAM50') {setlistkm<-levels(clin[,3])
myrow<-3 }#pam50
if (subtype=='MOD1') {setlistkm<-levels(clin[,4])
myrow<-4 }# mod1
if (subtype=='MOD2') {setlistkm<-levels(clin[,5])
myrow<-5 }#mod2
clinset<-clin[,myrow]
clindf<-data.frame(rownames(clin),clinset)
colnames(clindf)<-c("GSM","Subtype")
myset<-merge(clindf, gene, by.x=1, by.y=0)
#get ready to plot-------
basedir<-results_dir
mydir<-paste(basedir,"/", signame, "-","heatmap",sep="")
dir.create(mydir)
mydir2<-paste(mydir, "/", sep="")
setwd(mydir2)
#reshape data for heatmap
require(ggplot2)
require(reshape)
mdata <- melt(myset, id=c("GSM","Subtype"),variable_name="probe")
cdata <- cast(mdata, probe~Subtype, mean)
cadata<-merge(myidann, cdata, by.x=1, by.y=1)
mynames<-make.names(cadata[,2], unique=T)
rownames(cadata)<-mynames
cadata<-as.matrix(cadata[,-c(1:2)])
gdata<- melt(cdata, id=c("probe"))
adata<-merge(myidann, gdata, by.x=1, by.y=1)
#ggplot heatmap
base <- (ggplot(adata, aes(Subtype, Symbol)) + geom_tile(aes(fill = value),color = "black")
+ scale_fill_gradient(low = "white",high = "red"))
myheatmap<- base + theme_bw()+theme(axis.text  = element_text(size = rel(1.5)),axis.text.y = element_text(size=rel(.8)))+labs(title = "",x = "", y="") +theme(axis.text.x = element_text(angle = 90, hjust = 1
))
fname<-paste(signame,"_",subtype, "_Heatmap_ggplot.pdf",sep="")
ggsave(plot=myheatmap,filename=fname, dpi=320, width=8, height=12)
#alternate heatmap
require(gplots)
require(RColorBrewer)
mydistman= function(x) dist(x,method = 'manhattan')
mycol2<- colorpanel(29,"gray90","red")
my.breaks <- c(seq(4, 6, length.out=10),seq(6, 8),seq(8,12, length.out=10))
pdf(file=paste(signame,"_", subtype,"_Heatmap_clustered.pdf", sep=""),width=10, height=12)
rmheat<-heatmap.2(cadata, trace="none", dendrogram="both", col=mycol2,Rowv=TRUE, Colv=TRUE, main="", symbreaks=F, scale= "none",margins=c(15,10), cexRow=1, cexCol=1.5, labRow=row.names(cadata),distfun=mydistman,density.info="none", keysize=1)
graphics.off()
}
base <- (ggplot(adata, aes(Subtype, Symbol)) + geom_tile(aes(fill = value),color = "black")
+ scale_fill_gradient(low = "white",high = "red"))
myheatmap<- base + theme_bw()+theme(axis.text  = element_text(size = rel(1.5)),axis.text.y = element_text(size=rel(.8)))+labs(title = "",x = "", y="") +theme(axis.text.x = element_text(angle = 90, hjust = 1),panel.border=element_rect(fill = NA, colour=alpha('black', .5),size=10)) )
myheatmap<- base + theme_bw()+theme(axis.text  = element_text(size = rel(1.5)),axis.text.y = element_text(size=rel(.8)))+labs(title = "",x = "", y="") +theme(axis.text.x = element_text(angle = 90, hjust = 1))
myheatmap<- base + theme_bw()+theme(axis.text  = element_text(size = rel(1.5)),axis.text.y = element_text(size=rel(.8)))+labs(title = "",x = "", y="")
+ theme(axis.text.x = element_text(angle = 90, hjust = 1)) + theme(panel.border=element_rect(fill = NA, colour=alpha('black', .5),size=10))
myheatmap<- base + theme_bw()+theme(axis.text  = element_text(size = rel(1.5)),axis.text.y = element_text(size=rel(.8)))+labs(title = "",x = "", y="")
+ theme(axis.text.x = element_text(angle = 90, hjust = 1)) + theme(panel.border=element_rect(fill = NA, colour=alpha('black', .5),size=10))
base <- (ggplot(adata, aes(Subtype, Symbol)) + geom_tile(aes(fill = value),color = "black")
+ scale_fill_gradient(low = "white",high = "red"))
myheatmap<- base + theme_bw()+theme(axis.text  = element_text(size = rel(1.5)),axis.text.y = element_text(size=rel(.8)))+labs(title = "",x = "", y="")
+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
base <- (ggplot(adata, aes(Subtype, Symbol)) + geom_tile(aes(fill = value),color = "black")
+ scale_fill_gradient(low = "white",high = "red"))
myheatmap<- base + theme_bw() + theme(axis.text  = element_text(size = rel(1.5)),axis.text.y = element_text(size=rel(.8)))+labs(title = "",x = "", y="") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
fname<-paste(signame,"_",subtype, "_Heatmap_ggplot.pdf",sep="")
ggsave(plot=myheatmap,filename=fname, dpi=320, width=8, height=12)
cat("0")
mysigfile="probetest.txt"
signame="test_heatp"
idtype="symbol"
subtype="PAM50"
split="median"
surv_type ="rfs"
months = 240
chemo = "any"
tam = "any"
results_dir<-"/Volumes/Data/Git_Repos/GeneAnalytics/htdocs/results/test2p"
dir.create(results_dir)
setwd("/Volumes/Data/Git_Repos/GeneAnalytics/cgi-bin")
cat("0")
#validate args
idtype <- match.arg(idtype)
chemo <- match.arg(chemo)
tam <- match.arg(tam)
subtype <- match.arg(subtype)
chemo <- match.arg(chemo)
tam <- match.arg(tam)
split<-match.arg(split)
surv_type<-match.arg(surv_type)
months<-as.numeric(months)
cat ("1")
#load input file with ids
mysigfileloc<-paste("../htdocs/uploads","/", mysigfile, sep="")
mysigfiledn<-read.table(mysigfileloc, sep="\t", header=F)
id<-as.character(mysigfiledn[,1])
id<-gsub("\\s","", id)
if (exists("mysigfiledn") & (idtype=="symbol")){
sigsymbols<-id
} else if (exists("mysigfiledn") & (idtype=="probe")){
sigprobes<-id
} else {stop("Please define id and idtype.")
}
#get identifiers, validate, inform if missing
if (!exists("sigsymbols") & exists("sigprobes")){
require(hgu133a.db)
sigsymbols_map = unlist(mget(sigprobes, hgu133aSYMBOL,ifnotfound=NA))
sigpmissing<-subset(sigsymbols_map,is.na(sigsymbols_map))
if ( length(sigpmissing) > 0 ) {
cat ( " These probes could not be mapped:", paste(shQuote(names(sigpmissing)), collapse=", "))
}
sigann<-subset(sigsymbols_map,!is.na(sigsymbols_map))
myidann<-data.frame(names(sigann), sigann)
}
if (!exists("sigprobes") & exists("sigsymbols")){
require(jetset)
sigsymbols<- toupper(sigsymbols)
sigprobes_map<-(jmap('hgu133a', symbol = sigsymbols))
sigsmissing<-subset(sigprobes_map,is.na(sigprobes_map))
if ( length(sigsmissing) > 0 ) {
cat ( " These symbols could not be mapped:", paste(shQuote(names(sigsmissing)), collapse=", "))
}
sigann<-subset(sigprobes_map,!is.na(sigprobes_map))
myidann<-data.frame(sigann, names(sigann))
}
cat ("2")
idtype="probe"
mysigfile="probetest.txt"
signame="test_heatp"
idtype="probe"
subtype="PAM50"
split="median"
surv_type ="rfs"
months = 240
chemo = "any"
tam = "any"
results_dir<-"/Volumes/Data/Git_Repos/GeneAnalytics/htdocs/results/test2p"
dir.create(results_dir)
setwd("/Volumes/Data/Git_Repos/GeneAnalytics/cgi-bin")
cat ("1")
#load input file with ids
mysigfileloc<-paste("../htdocs/uploads","/", mysigfile, sep="")
mysigfiledn<-read.table(mysigfileloc, sep="\t", header=F)
id<-as.character(mysigfiledn[,1])
id<-gsub("\\s","", id)
if (exists("mysigfiledn") & (idtype=="symbol")){
sigsymbols<-id
} else if (exists("mysigfiledn") & (idtype=="probe")){
sigprobes<-id
} else {stop("Please define id and idtype.")
}
#get identifiers, validate, inform if missing
if (!exists("sigsymbols") & exists("sigprobes")){
require(hgu133a.db)
sigsymbols_map = unlist(mget(sigprobes, hgu133aSYMBOL,ifnotfound=NA))
sigpmissing<-subset(sigsymbols_map,is.na(sigsymbols_map))
if ( length(sigpmissing) > 0 ) {
cat ( " These probes could not be mapped:", paste(shQuote(names(sigpmissing)), collapse=", "))
}
sigann<-subset(sigsymbols_map,!is.na(sigsymbols_map))
myidann<-data.frame(names(sigann), sigann)
}
if (!exists("sigprobes") & exists("sigsymbols")){
require(jetset)
sigsymbols<- toupper(sigsymbols)
sigprobes_map<-(jmap('hgu133a', symbol = sigsymbols))
sigsmissing<-subset(sigprobes_map,is.na(sigprobes_map))
if ( length(sigsmissing) > 0 ) {
cat ( " These symbols could not be mapped:", paste(shQuote(names(sigsmissing)), collapse=", "))
}
sigann<-subset(sigprobes_map,!is.na(sigprobes_map))
myidann<-data.frame(sigann, names(sigann))
}
cat ("2")
#attach libraries
require(ggplot2)
require(survival)
require(RSQLite)
require(rmeta)
#load patient data from sql
clin<-read.table("../resources/data/BRCADB_2013_Clinical.txt", sep="\t", header=T)
drv <- dbDriver("SQLite")
con <- dbConnect(drv, dbname="../resources/external/BRCADB_final_2013.sqlite")
#dbListTables(con)
probesql<-paste("'",as.character(myidann[,1]),"'",collapse=", ",sep="")
myquery<-paste("SELECT * FROM BRCADB WHERE row_names IN (",probesql,")" ,sep="")
gene<-dbGetQuery(con,myquery)
gene<-data.frame(gene, row.names=1)
gene<-as.data.frame(gene)
cat ("3")
#genefu to get sigscores
require("genefu")
#get sigfile
if (idtype=="symbol"){
mysigfiledn[,1]<-toupper(mysigfiledn[,1])
newsigfile<-merge(mysigfiledn, myidann, by.x=1, by.y=2)
newsigfile<-unique(newsigfile)
rownames(newsigfile)<-newsigfile[,3]
colnames(newsigfile)<-c("symbol", "coefficient", "probe")
newsigfile$EntrezGene.ID<-"ent"
}
#if probes
if( idtype=="probe"){
newsigfile<-merge(mysigfiledn, myidann, by.x=1, by.y=1)
newsigfile<-unique(newsigfile)
rownames(newsigfile)<-newsigfile[,1]
colnames(newsigfile)<-c("probe", "coefficient", "symbol")
newsigfile$EntrezGene.ID<-"ent"
}
mysigfiledn
unique(mysigfiledn)
sigann
sigpmissing
if ( length(sigpmissing) > 0 ) {
cat ( " These probes could not be mapped:", paste(shQuote(names(sigpmissing)), collapse=", "))
}
newsigfile<-merge(mysigfiledn, myidann, by.x=1, by.y=1)
newsigfile<-unique(newsigfile)
rownames(newsigfile)<-newsigfile[,1]
colnames(newsigfile)<-c("probe", "coefficient", "symbol")
newsigfile
newsigfile<-merge(mysigfiledn, myidann, by.x=1, by.y=1)
newsigfile
newsigfile<-unique(newsigfile)
rownames(newsigfile)<-newsigfile[,3]
rownames(newsigfile)<-newsigfile[,3]
newsigfile<-merge(mysigfiledn, myidann, by.x=1, by.y=2)
newsigfile<-unique(newsigfile)
rownames(newsigfile)<-newsigfile[,3]
newsigfile
newsigfile<-merge(mysigfiledn, myidann, by.x=1, by.y=1)
newsigfile<-unique(newsigfile)
rownames(newsigfile)<-newsigfile[,1]
newsigfile
myidann
mysigfiledn
if (mysigfiledn[1,2] != c(-1,1){
if (mysigfiledn[1,2] != c(-1,1)){
stop("Please define id and idtype.")
}
mysigfiledn
if (mysigfiledn[1,2] != c(-1,1)){
stop("Please define id and idtype.")
}
mysigfiledn1<-mysigfiledn
mysigfiledn1[,2] <- 1
mysigfiledn
mysigfiledn1
if (mysigfiledn[1,2] != c(-1,1)){
stop("Please define id and idtype.")
}
mysigfiledn[1,2] != c(-1,1))
mysigfiledn[1,2] != c(-1,1))
mysigfiledn[1,2] != c(-1,1)
if (is.numeric(mysigfiledn[,2]){
stop("Please define id and idtype.")
if (is.numeric(mysigfiledn[,2]){
if (is.numeric(mysigfiledn[,2])){
stop("Please define id and idtype.")
}
if (exists("mysigfiledn") & is.numeric(mysigfiledn[,2])){
stop("Please define id and idtype.")
}
if (exists(mysigfiledn[,2]) & is.numeric(mysigfiledn[,2])){
stop("Please define id and idtype.")
}
dim(mysigfiledn)
dim(mysigfiledn1)
dim(mysigfiledn1)[[2]]
if (dim(mysigfiledn1)[[2]]==2){
stop("Please define id and idtype.")
}
if (dim(mysigfiledn1)[[2]]!=2){
stop("Please check file format. Stopping.")
}
if (dim(mysigfiledn)[[2]]!=2){
stop("Please check file format. Stopping.")
}
